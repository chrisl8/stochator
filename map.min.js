var d3=window.d3,CellClusters=function(){function a(b){this.indexes={};this.clusters=[];this.count=b}a.prototype.has=function(b){return this.indexes[b]};a.prototype.forEach=function(b,a){this.clusters.forEach(b,a||this)};a.prototype.map=function(b,a){return this.clusters.map(b,a||this)};a.prototype.filter=function(b,a){return this.clusters.filter(b,a||this)};a.prototype.addCluster=function(b){this.clusters.push(b)};a.prototype.getCluster=function(b){return this.clusters[b]};a.prototype.addToNewCluster=
function(b,a){this.indexes[b]=!0;this.addCluster(new CellCluster(b,a))};a.prototype.addToCluster=function(b,a){this.indexes[a]=!0;this.getCluster(b).add(a)};a.prototype.getClusterIndex=function(b){for(var a=0,d=this.clusters.length;a<d;a++)if(this.clusters[a].has(b))return a;return-1};a.prototype.removeCluster=function(b){this.clusters.splice(b,1)};a.prototype.removeDuplicates=function(){var b=function(b,a){return parseInt(b,10)-parseInt(a,10)};this.clusters=Util.Array.unique(this.clusters,function(a,
d){var e=a.cells.sort(b),f=d.cells.sort(b);return e.join(",")==f.join(",")})};return a}(),CellCluster=function(){function a(b,a){this.indexes={};this.cells=[];this.add(b);this.cellType=a}a.prototype.has=function(b){return this.indexes[b]};a.prototype.add=function(b){this.indexes[b]=!0;this.cells.push(b+"")};a.prototype.join=function(b){b.cells.forEach(function(b){this.has(b)||this.add(b)},this)};a.prototype.getExteriorCells=function(){return this.cells.filter(function(b){return-1==this.interiorCells.indexOf(b)},
this)};return a}(),CellMap=function(){function a(b){this.setMapGeometry();this.continents=new ContinentalPlates(b,this.mask);this.cells=new Cells(b,this.mask,this.continents)}a.prototype.CELL_CLASS_OUTPUTS={lake:{mineral:0,food:4,energy:0},ocean:{mineral:0,food:4,energy:1},deepwater:{mineral:0,food:0,energy:0},sea:{mineral:0,food:6,energy:1},mountain:{mineral:8,food:1,energy:2},snow:{mineral:2,food:0,energy:2},tundra:{mineral:1,food:1,energy:1},forest:{mineral:2,food:4,energy:4},prairie:{mineral:1,
food:5,energy:2},taiga:{mineral:1,food:2,energy:2},"tropical-forest":{mineral:1,food:6,energy:2},"tropical-rainforest":{mineral:1,food:6,energy:2},"temperate-rainforest":{mineral:1,food:6,energy:2},rainforest:{mineral:1,food:6,energy:2},savanna:{mineral:2,food:5,energy:3},desert:{mineral:3,food:0,energy:3}};a.prototype.drawCells=function(){var b=this.cells.polygons,a=this.cells.biomes,d=this.cells.elevations,e={"class":function(b,e){return"cell "+a[e]+" elevation-"+Math.round(10*d[e])},d:function(a,
c){return Util.SVG.polygonString(b[c])}},f=this;this.bindData(this.cellNodes,this.cells.centroids,"svg:path",function(b){b.attr(e).on("click",function(b,a){f.logCell(a)})})};a.prototype.drawClusters=function(){var b=d3.merge(this.cells.clusterEdges),a={"class":function(a,c){return"cluster "+b[c].cellType},d:function(a,c){return Util.SVG.polygonString(b[c])}};this.bindData(this.clusterNodes,b,"svg:path",function(b){b.attr(a)})};a.prototype.drawRivers=function(){var b=this.cells.rivers,a={"class":"river",
style:function(a,c){return"stroke-width: "+b[c].length+"px"},d:function(a,c){return Util.SVG.polygonString(b[c],!0)}};this.bindData(this.riverNodes,b,"svg:path",function(b){b.attr(a)})};a.prototype.drawVertices=function(){var b=this.cells.landVertices,a={"class":"vertex",r:5,cx:function(a,c){return b[c][0]},cy:function(a,c){return b[c][1]}};this.bindData(this.vertexNodes,b,"svg:circle",function(b){b.attr(a)})};a.prototype.hideVertices=function(){this.vertexNodes.style("display","none")};a.prototype.showVertices=
function(){this.vertexNodes.style("display","")};a.prototype.drawCellValues=function(){var b=this.cells.centroids,a=this.cells.biomes.map(function(b,a){var c=this.cells.areas[a],g=this.CELL_CLASS_OUTPUTS[b];g||console.log(b);return{food:Math.ceil(g.food*c),energy:Math.ceil(g.energy*c),mineral:Math.ceil(g.food*c)}},this);this.bindData(this.cellValueNodes,a,"div",function(d){d.attr("class","cell-value").style("left",function(a,c){return b[c][0]-15+"px"}).style("top",function(a,c){return b[c][1]-6+"px"}).html(function(b,
d){var g=a[d];if(g.food||g.mineral||g.energy)return g.food+", "+g.mineral+", "+g.energy})})};a.prototype.getCellNodes=function(){return this.svg.selectAll("path.cell")};a.prototype.getVertexNodes=function(){return this.svg.selectAll("circle.vertex")};a.prototype.getClusterNodes=function(){return this.svg.selectAll("path.cluster")};a.prototype.getCellValueNodes=function(){return d3.select("#mask").selectAll("div.cell-value")};a.prototype.getContinentBoundaryNodes=function(){return this.svg.selectAll("path.continent")};
a.prototype.getRiverNodes=function(){return this.svg.selectAll("path.river")};a.prototype.getNodes=function(){this.svg=this.initializeSvg();this.cellNodes=this.getCellNodes();this.clusterNodes=this.getClusterNodes();this.vertexNodes=this.getVertexNodes();this.cellValueNodes=this.getCellValueNodes();this.continentBoundaryNodes=this.getContinentBoundaryNodes();this.riverNodes=this.getRiverNodes()};a.prototype.draw=function(){this.getNodes();this.drawCells();this.drawClusters();this.drawRivers()};a.prototype.bindData=
function(b,a,d,e){e(b.data(a).enter().append(d))};a.prototype.drawContinentBoundaries=function(){var b=this.continents.plates;this.bindData(this.continentBoundaryNodes,b,"svg:path",function(a){a.attr({"class":"continent",d:function(a,c){return Util.SVG.polygonString(b[c].cell)}})})};a.prototype.zoomPan=function(b,a){var d=["scale("+b+","+b+")"];if(a){var e="translate("+[this.mask.width/2-a[0],this.mask.height/2-a[1]].join("px, ")+"px)";d.push(e)}this.svg[0][0].style.webkitTransform=d.join(" ")};a.prototype.isZoomed=
!1;a.prototype.initializeSvg=function(){var b=this;return d3.select("svg#map").attr({width:this.mask.width,height:this.mask.height}).on("dblclick",function(){b.isZoomed?(b.isZoomed=!1,b.zoomPan(1)):(b.isZoomed=[b.mask.width/2,b.mask.height/2],b.zoomPan(2,[d3.event.x,d3.event.y]))})};a.prototype.setMapGeometry=function(){var b=document.documentElement,a=b.clientWidth,b=b.clientHeight;this.mask=Util.Geom.createRectangle([0,0],[a,b]);this.mask.width=a;this.mask.height=b};a.prototype.logData=function(){var b=
Util.Array.count(this.cells.biomes),a=[0.01,0.1,0.25,0.5,0.75,0.9,0.99];console.log("class counts",b);console.log("moisture percentiles",Util.Array.getPercentiles(this.cells.moistures,a));console.log("riverMoisture percentiles",Util.Array.getPercentiles(this.cells.riverMoistures,a));console.log("elevation percentiles",Util.Array.getPercentiles(this.cells.elevations,a));console.log("temperature percentiles",Util.Array.getPercentiles(this.cells.temperatures,a));b=this.cells.rivers.reduce(function(b,
a){return b+a.length},0);console.log("rivers",this.cells.rivers.length,"total length",b)};a.prototype.logCell=function(b){console.log({clusterIndex:this.cells.getContainingClusterIndex(b),elevation:this.cells.elevations[b],index:b,temperature:this.cells.temperatures[b]})};a.prototype.reinit=function(){this.svg.selectAll("*").remove();this.constructor.call(this,this.cells.count)};return a}(),Cells=function(){function a(b,a,d){this.count=b;this.mask=a;this.averageArea=this.mask.area()/this.count;this.averageRadius=
this.getAverageRadius();this.isEdgePoint=Util.Geom.edgeTester(this.mask.width,this.mask.height);this.isEdgePolygon=Util.Geom.polygonEdgeTester(this.mask.width,this.mask.height);this.getRandomPoints=this.getPointGenerator();this.indexes=this.getIndexes();this.polygons=this.getPolygons();this.setCentroids(d);this.polygons=this.relaxVertices();this.edgePolygons=this.getEdgePolygons();this.types=this.getTypes();this.vertices=this.getVertices();this.edges=this.getEdges();this.setNeighborTypes();this.interiorEdges=
this.getInteriorEdges();this.clusters=this.getClusters();this.clusterCentroids=this.getClusterCentroids();this.clusterEdges=this.getClusterEdges();this.containingClusters=this.getContainingClusters();this.elevations=this.getElevations();this.vertexElevations=this.getVertexElevations();this.rivers=this.getRivers();this.riverVertices=this.getRiverVertices();this.riverMoistures=this.getRiverMoistures();this.moistures=this.getMoistures();this.biomes=this.getBiomes();this.adjustBiomesByCluster()}a.prototype.CLASSIFICATIONS=
[["tropical-rainforest","tropical-rainforest",null,null,null],["tropical-rainforest","temperate-rainforest","forest",null,null],["tropical-forest","forest","forest","taiga",null],["tropical-forest","forest","forest","taiga","taiga"],["savanna","savanna","prairie","taiga","taiga"],["desert","desert","prairie","taiga","tundra"]];a.prototype.TYPES={ocean:"ocean",land:"land"};a.prototype.getPolygons=function(){for(var b;!b;){var a=this.getRandomPoints(this.count);try{b=Util.Geom.relaxPoints(a,this.mask,
1)}catch(d){}}return Util.Geom.getClippedVoronoi(b,this.mask)};a.prototype.setCentroids=function(b){this.centroids=[];this.temperatures=[];this.vertices={};this.polygons.forEach(function(a,d){var e=Util.Geom.polygonCentroid(a);this.centroids.push(e);this.temperatures.push(this.getTemperature(e));this.setVertices(a,d,this.vertices);e=b.getContainingContinent(e);this.setParentContinent(d,b.plates[e])},this)};a.prototype.setVertices=function(b,a,d){b.map(Util.Geom.pointToString).forEach(function(b){var f=
d[b]||[];f.push(a);d[b]=f})};a.prototype.getVertices=function(){var b={};this.areas=[];this.landVertices=[];Util.Array.multiEach([this.polygons,this.types],function(a,d){var e=a[0],f=a[1];this.areas.push(d3.geom.polygon(e).area()/this.averageArea);this.setVertices(e,d,b);"land"==f&&(this.landVertices=this.landVertices.concat(e))},this);return b};a.prototype.mapVertex=function(b,a){return this.vertices[b].map(a)};a.prototype.getEdges=function(){var b=[],a=this.types;Util.Obj.forEach(this.vertices,
function(d,e){e.forEach(function(f,g){for(var h=a[f],j=b[f]||[],l=0;l<e.length;l++)if(l!=g){for(var m=e[l]+"",n=a[m],k=null,p=null,q=0;q<j.length;q++)if(j[q].index==m){k=j[q];break}k?1==k.points.length?k.points.push(d):d!=k.points[1]&&(p={exterior:k.exterior,index:k.index,points:[k.points[1],d]}):p={exterior:h!=n,index:m,points:[d]};p&&j.push(p)}b[f]=j})});return b};a.prototype.relaxVertices=function(){var b=Util.Array.getter(this.centroids),a=function(a){return this.isEdgePoint(a)?a:Util.Geom.roundPoint(Util.Geom.pointMean(this.mapVertex(a,
b)))};return this.polygons.map(function(b){return Util.Geom.simplifyPolygon(b.map(a,this))},this)};a.prototype.getTemperature=function(a){var c=this.mask.height/2;return 1-Math.abs(c-a[1])/c};a.prototype.parentContinents=[];a.prototype.continentCentralities=[];a.prototype.continentEdgeDistances=[];a.prototype.setParentContinent=function(a,c){var d=this.centroids[a];this.parentContinents[a]=c;this.continentCentralities[a]=c.getPointCentrality(d);this.continentEdgeDistances[a]=Math.min(1,Util.Geom.distanceToPolygon(d,
c.cell)/this.averageRadius)};a.prototype.getTypes=function(){var a=[(new Stochator({min:0.2,max:0.8,kind:"float"})).next(this.count),this.parentContinents,this.edgePolygons,this.continentCentralities];return Util.Array.multiMap(a,function(a){return a[2]?this.TYPES.ocean:a[3]>a[0]?this.TYPES.land:this.TYPES.ocean},this)};a.prototype.setNeighborTypes=function(){this.oceanNeighbors=[];this.clusterExteriors=[];var a=Util.Function.equals("ocean"),c=Util.Obj.attrGetter("index"),d=Util.Array.getter(this.types);
Util.Array.multiEach([this.types,this.edges,this.edgePolygons],function(e){var f=e[1],g=e[2];e=Util.Function.equals(e[0]);f=f.map(c).map(d);g=g||f.filter(e).length<f.length;this.oceanNeighbors.push(f.filter(a).length/f.length);this.clusterExteriors.push(g)},this)};a.prototype.getRiverMoistures=function(){var a=this.riverVertices;Util.Obj.attrGetter("length");var c=function(c,e){return a[Util.Geom.pointToString(e)]?c+1:c};return this.polygons.map(function(a){return a.reduce(c,0)/a.length},this)};a.prototype.getMoistures=
function(){var a=d3.scale.linear().clamp(!0),c=(new Stochator({min:-0.3,max:0.3})).next(this.count),d=Math.sqrt(2);return Util.Array.multiMap([c,this.riverMoistures,this.oceanNeighbors],function(c){var f=c[0];c=Math.sqrt(c[2]+c[1])/d;return a(f+c)},this)};a.prototype.getElevations=function(){var a=d3.scale.linear().clamp(!0),c=[(new Stochator({min:-0.1,max:0.1})).next(this.count),this.types,this.centroids,this.continentEdgeDistances,this.containingClusters];return Util.Array.multiMap(c,function(c){var e=
c[0],f=c[3];if("ocean"==c[1])return 0;c=Util.Geom.distanceToPolygons(c[2],this.clusterEdges[c[4]]);f=Util.Math.geometricMean([c,f])/11;return a(e+f)},this)};a.prototype.getVertexElevations=function(){var a=Util.Array.getter(this.elevations),c={};this.landVertices.forEach(function(d){var e=this.mapVertex(d,a),e=Util.Math.mean(e);c[d]=e},this);return c};a.prototype.getIndexes=function(){return d3.range(this.count)};a.prototype.getRivers=function(){var a=new Stochator({min:0.25,max:1},{}),c=this.vertexElevations,
d=this,e=this.edges,f=[],g=function(a){return d.mapVertex(a,function(b){return e[b].filter(function(b){return-1!=b.points.indexOf(a)})})};Util.Obj.forEach(c,function(c,d){var e=a.next(),n;if(n=d>e[0]){if(e=0.25>e[1])var k=Util.Obj.attrGetter("exterior"),e=!g(c).some(function(a){return a.some(k)});n=e}n&&f.push(c)});var h=function(a,b){var d=g(a),e,f,h;d3.merge(d).forEach(function(d){var g=1-d.points.indexOf(a),g=d.points[g],m=c[g];if((null==f||m<e)&&-1==b.indexOf(g))e=m,f=g,h=d});return!h||h.exterior?
null:f};return f.map(function(a){for(var b=[];a;)b.push(a),a=h(a,b);return b})};a.prototype.getRiverVertices=function(){var a={};this.rivers.forEach(function(c){c.forEach(function(c){a[c]=!0})});return a};a.prototype.getClusters=function(){var a=Util.Obj.attrGetter("index"),c={};return Util.Array.multiMap([this.edges,this.types],function(d,e){var f=d[1],g=e+"";if(!c[g]){var h=[],j=[],l=function(a){c[a]||(h.push(a),j.push(a),c[a]=!0)};for(l(g);j.length;)this.interiorEdges[j.pop()].map(a).forEach(l);
return{cellType:f,cells:h}}},this).filter(Boolean)};a.prototype.getInteriorEdges=function(){var a=function(a){return!a.exterior&&2==a.points.length};return this.edges.map(function(c){return c.filter(a)})};a.prototype.getContainingClusters=function(){var a=[];this.clusters.forEach(function(c,d){var e=Util.Array.valueSetter(a,d);c.cells.forEach(e)});return a};a.prototype.getBiomes=function(){var a=[this.types,this.oceanNeighbors,this.elevations,this.temperatures,this.moistures],c=d3.scale.linear().clamp(!0),
d=d3.scale.linear().clamp(!0);return Util.Array.multiMap(a,function(a){var b=a[0],g=a[1],h=a[2],j=a[3];a=a[4];if("land"!=b)return 0.75<g?"deepwater":b;d.range([0.01,j+0.1]);j=c(j-h/4);b=5-Math.floor(5*d(a));return this.CLASSIFICATIONS[b][4-Math.floor(4*j)]},this)};a.prototype.adjustBiomesByCluster=function(){this.clusters.forEach(function(a){"ocean"==a.cellType&&(3>a.cells.length?this.setClusterCellType(a,"lake",0):100>a.cells.length&&this.setClusterCellType(a,"sea",0))},this)};a.prototype.setClusterCellType=
function(a,c,d){a.cellType=c;a.cells.forEach(function(a){this.biomes[a]=c;null!=d&&(this.elevations[a]=d)},this)};a.prototype.getPointGenerator=function(){return(new Stochator({min:0,max:this.mask.width,kind:"integer"},{min:0,max:this.mask.height,kind:"integer"})).next};a.prototype.getClusterCentroids=function(){var a=Util.Array.getter(this.centroids);return this.clusters.map(function(c){return Util.Geom.pointMean(c.cells.map(a))},this)};a.prototype.getEdgeKey=function(a,c){return a<c?[a,c]:[c,a]};
a.prototype.getClusterEdges=function(){var a=Util.Array.getter(this.clusterExteriors),c=Util.Obj.attrGetter("cells"),d=Util.Obj.attrGetter("exterior"),e=Util.Obj.attrGetter("points"),f=function(a){return 2==a.length},g=function(a){return this.edges[a].filter(d).map(e).filter(f)},h=function(a,b){if(!a.length)return[];var c=[],d=a.pop()[0],e=[d];for(a.slice();a.length;){for(var f=!1,g=0;g<a.length;g++){var r=a[g],s=r.indexOf(d);if(-1!=s){d=r[1-s];e.push(d);a.splice(g,1);f=!0;break}}if(!f)break}a.length&&
c.push(a);d=e.map(Util.Geom.stringToPoint);d.push(d[0]);d.cellType=this.clusters[b].cellType;var t=[d];c.forEach(function(a){h.call(this,a,b).forEach(function(a){t.push(a)})},this);return t};return this.clusters.map(c).map(function(c){return c.filter(a,this).map(g,this)},this).map(d3.merge).map(h,this)};a.prototype.getEdgePolygons=function(){return this.polygons.map(this.isEdgePolygon)};a.prototype.getAverageRadius=function(){return Util.Geom.distance([0,0],[this.mask.width,this.mask.height])/2/this.count};
return a}(),ContinentalPlates=function(){function a(a,c){var d=new Stochator({min:0.2,max:0.4});this.continentCount=Math.pow(a,d.next());this.mask=c;this.getRandomPoints=(new Stochator({min:0,max:this.mask.width,kind:"integer"},{min:0,max:this.mask.height,kind:"integer"})).next;var e=new Stochator({kind:"set",values:["land","ocean"],weights:[0.8,0.2]}),d=this.getPlates(),e=e.next(d.length);this.setPlates(d,e)}a.prototype.getPlateEdges=function(){var a=d3.map();this.vertices.forEach(function(c,d){for(var e=
0;e<d.length;e++)for(var f=e+1;f<d.length;f++){var g=[d[e],d[f]];a.get(g)||a.set(g,!0)}});return a.keys()};a.prototype.getPlateVertices=function(){var a=d3.map();this.plates.forEach(function(c,d){c.cell.forEach(function(c){var f=a.get(c)||[];f.push(d);a.set(c,f)})});return a};a.prototype.setPlates=function(a,c){this.plates=a.map(function(a,b){return new ContinentalPlate(a,c[b])});this.vertices=this.getPlateVertices();this.edges=this.getPlateEdges()};a.prototype.getContainingContinent=function(a){var c=
null,d=null;this.plates.forEach(function(e,f){var g=Util.Geom.distance(a,e.centroid);if(null==c||g<d)c=f,d=g});return c};a.prototype.getInitialCentroids=function(){return this.getRandomPoints(this.continentCount)};a.prototype.getPlates=function(){return Util.Geom.getClippedVoronoi(Util.Geom.relaxPoints(this.getInitialCentroids(),this.mask,1),this.mask)};return a}(),ContinentalPlate=function(){function a(a,c){this.cell=a;this.plateType=c;this.centroid=Util.Geom.pointMean(this.cell);this.vertexDistance=
this.getVertexDistance()}a.prototype.getVertexDistance=function(){return this.cell.map(function(a){return Util.Geom.distance(a,this.centroid)},this).reduce(function(a,c){return a+c})/this.cell.length};a.prototype.getPointCentrality=function(a){return 1-Util.Geom.distance(a,this.centroid)/this.vertexDistance};return a}(),Util={Geom:{}};
Util.Geom.intersection=function(a,b){var c=Util.Geom.slope(a[0],a[1]),d=Util.Geom.intercept(a[0],a[1]),e=Util.Geom.slope(b[0],b[1]),f=Util.Geom.intercept(b[0],b[1]);return(d+f)/(e-c)};Util.Geom.slope=function(a,b){return(b[1]-a[1])/(b[0]-a[0])};Util.Geom.intercept=function(a,b){return a[1]+b*a[0]};Util.Geom.distanceSquared=function(a,b){return Math.pow(b[0]-a[0],2)+Math.pow(b[1]-a[1],2)};Util.Geom.distance=function(a,b){return Math.sqrt(Util.Geom.distanceSquared(a,b))};
Util.Geom.createRectangle=function(a,b){return d3.geom.polygon([a,[a[0],b[1]],b,[b[0],a[1]]])};Util.Geom.pointSum=function(a,b){return[a[0]+b[0],a[1]+b[1]]};Util.Geom.pointMean=function(a){var b=a.reduce(Util.Geom.pointSum,[0,0]);return[b[0]/a.length,b[1]/a.length]};Util.Geom.roundPoint=function(a){a[0]=Math.round(a[0]);a[1]=Math.round(a[1]);return a};Util.Geom.roundPoints=function(a){return a.map(Util.Geom.roundPoint)};
Util.Geom.edgeTester=function(a,b){return function(c){var d=c[0]===a||c[1]===b;return 0===c[0]||0===c[1]||d}};Util.Geom.polygonEdgeTester=function(a,b){var c=Util.Geom.edgeTester(a,b);return function(a){return a.some(c)}};Util.Geom.polygonCentroid=function(a){return d3.geom.polygon(a).centroid()};Util.Geom.closestPointOnSegment=function(a,b,c){var d=b,e=c[0]-b[0],f=c[1]-b[1];0!=e&&0!=f&&(a=((a[0]-b[0])*e+(a[1]-b[1])*f)/(e*e+f*f),1<a?d=c:0<a&&(d=[b[0]+a*e,b[1]+a*f]));return d};
Util.Geom.closestPointsOnPolygon=function(a,b){for(var c=[],d=0,e=b.length;d<e;d+=2){var f=b[d],g=b[d+1];g||(g=b[0]);c.push(Util.Geom.closestPointOnSegment(a,f,g))}return c};Util.Geom.closestPoint=function(a,b){var c=null;b.forEach(function(b){b=Util.Geom.distance(a,b);if(null==c||b<c)closestPoints=a,c=b});return null};Util.Geom.distanceToPoints=function(a,b){return b.map(function(b){return Util.Geom.distance(a,b)})};
Util.Geom.distanceToPolygon=function(a,b){var c=Util.Geom.closestPointsOnPolygon(a,b),c=Util.Geom.distanceToPoints(a,c);return Math.min.apply(Math,c)};Util.Geom.distanceToPolygons=function(a,b){return Util.Geom.distanceToPolygon(a,d3.merge(b))};Util.Geom.getClippedVoronoi=function(a,b){try{return d3.geom.voronoi(a).map(b.clip).map(Util.Geom.roundPoints)}catch(c){return null}};
Util.Geom.relaxPoints=function(a,b,c){d3.range(c).forEach(function(){a=Util.Geom.getClippedVoronoi(a,b).map(Util.Geom.polygonCentroid)});return a};Util.Geom.pointToString=function(a){return a.join(",")};Util.Geom.stringToPoint=function(a){a=a.split(",");return[parseInt(a[0],10),parseInt(a[1],10)]};Util.Geom.simplifyPolygon=function(a){return Util.Array.unique(a,function(a,c){return a[0]==c[0]&&a[1]==c[1]})};Util.Obj={};
Util.Obj.countValues=function(a,b){return a.reduce(function(a,d){a[d[b]]=(a[d[b]]||0)+1;return a},{})};Util.Obj.attrGetter=function(a){return function(b){return b[a]}};Util.Obj.forEach=function(a,b,c){for(var d in a)a.hasOwnProperty(d)&&b.call(c||this,d,a[d])};Util.SVG={};Util.SVG.polygonString=function(a,b){return"M"+a.join("L")+(b?"":"Z")};Util.Function={};Util.Function.compose=function(a,b){return function(){b(a())}};Util.Function.equals=function(a){return function(b){return b===a}};
Util.Array={};Util.Array.getPercentiles=function(a,b,c){c=Util.Array.getter(a.sort(c||function(a,b){return a-b}));c=b.map(function(b){return Math.floor(a.length*b)}).map(c);return Util.Array.toObject(d3.zip(b,c))};Util.Array.toObject=function(a){var b={};a.forEach(function(a){b[a[0]]=a[1]});return b};Util.Array.valueSetter=function(a,b){return function(c){a[c]=b}};Util.Array.indexGetter=function(a){return function(b){return b[a]}};Util.Array.getter=function(a){return function(b){return a[b]}};
Util.Array.count=function(a){var b={};a.forEach(function(a){b[a]=(b[a]||0)+1});return b};Util.Array.zipMap=function(){for(var a=arguments.length-1,b=Array.prototype.slice.call(arguments,0,a),a=Array.prototype.slice.call(arguments,a)[0],c=[],d=0;d<b[0].length;d++){var e=b.map(Util.Array.indexGetter(d));c.push(a.apply(this,e))}return c};
Util.Array.unique=function(a,b){var c=[];b=b||function(a,b){return a===b};for(var d=0;d<a.length;d++){for(var e=a[d],f=!0,g=0;g<c.length;g++)if(b(e,c[g])){f=!1;break}f&&c.push(e)}return c};Util.Array.multiMap=function(a,b,c){var d=a.map(Util.Obj.attrGetter("length")),d=Math.max.apply(Math,d);return d3.range(d).map(function(d){return b.call(c||this,a.map(Util.Array.indexGetter(d)),d)})};
Util.Array.multiEach=function(a,b,c){var d=a.map(Util.Obj.attrGetter("length")),d=Math.max.apply(Math,d);d3.range(d).forEach(function(d){b.call(c||this,a.map(Util.Array.indexGetter(d)),d)})};Util.Array.sum=function(a){return a.reduce(Util.Math.add)};Util.Array.indexFilter=function(a,b,c){var d=[];a.forEach(function(a,f){b.call(c||this,a)&&d.push(f)});return d};Util.Math={};Util.Math.clamp=function(a,b,c){return Math.min(c,Math.max(b,a))};
Util.Math.round=function(a,b){var c=Math.pow(10,b||0);return Math.round(a*c)/c};Util.Math.mean=function(a){return Util.Array.sum(a)/a.length};Util.Math.geometricMean=function(a){return Math.pow(a.reduce(function(a,c){return a*c},1),1/a.length)};Util.Math.add=function(a,b){return a+b};